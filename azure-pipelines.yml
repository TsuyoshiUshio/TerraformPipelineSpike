# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none
pr:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: pullrequest.state

steps:
- template: check_status_template.yml
  parameters:
    PullRequestNumber: $(PullRequestNumber)
    ExpireDate: $(ExpireDate)
    Status: $(Status)

- task: RunPipelines@1
  displayName: Terraform Apply (Master Branch)
  condition: and(succeeded(), eq(variables['Status', 'Started']))
  inputs:
    serviceConnection: 'Run Pipeline Service Connection'
    project: 'syncier test'
    folderPath: '\'
    buildDefinition: 'TsuyoshiUshio.TerrformApply.CI'
    setBranch: true
    Branch: 'refs/heads/master'
    targetType: 'inline'
    buildParameters: '[{"hello":"world"}]'
    customPrefix: 'Master.'
    waitForQueuedBuildsToFinish: true
    waitRefreshTime: '10'
    waitTimeOut: '120'
    storeInOutputVariable: false
- template: update_status_template.yml
  parameters:
    PullRequestNumber: $(PullRequestNumber)
    ExpireDate: $(ExpireDate)
    CurrentStatus: $(Status)
    NewStatus: 'MasterApplied'

- task: RunPipelines@1
  displayName: Terraform Apply ($(Build.SourceBranch))
  condition: and(succeeded(), eq(variables['Status', 'MasterApplied']))
  inputs:
    serviceConnection: 'Run Pipeline Service Connection'
    project: 'syncier test'
    folderPath: '\'
    buildDefinition: 'TsuyoshiUshio.TerrformApply.CI'
    setBranch: true
    Branch: '$(Build.SourceBranch)'
    targetType: 'inline'
    buildParameters: '[{"hello":"world"}]'
    customPrefix: '$(Build.SourceBranch).'
    waitForQueuedBuildsToFinish: true
    waitRefreshTime: '10'
    waitTimeOut: '120'
    storeInOutputVariable: false
- template: update_status_template.yml
  parameters:
    PullRequestNumber: $(PullRequestNumber)
    ExpireDate: $(ExpireDate)
    CurrentStatus: $(Status)
    NewStatus: 'Completed'

